extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.7"
    import: ["@key", "@shareable", "@inaccessible"]
  )

type Query {
  user(id: ID!): User
  "Currently logged-in user"
  me: User!
}

type User @key(fields: "id") {
  id: ID!
  "The user's first and last name"
  name: String!
  "The user's profile bio description, will be shown in the listing"
  profileDescription: String!
  "The last recorded activity timestamp of the user"
  lastActiveTime: String
  "Whether or not a user is logged in"
  isLoggedIn: Boolean!
}

type Mutation {
  ### Accounts
  "Updates the logged-in user's profile information"
  updateProfile(updateProfileInput: UpdateProfileInput): UpdateProfileResponse!
  "Logs the user in or out"
  changeLoggedInStatus: LoginStatusResponse
}

type LoginStatusResponse {
  "Whether or not the login or logout succeeded"
  success: Boolean!
  "The timestamp of the login or logout"
  time: String
  "A message describing the status of the login or logout"
  message: String!
}

interface MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}

input UpdateProfileInput {
  "The user's first and last name"
  name: String
  "The user's profile bio description, will be shown in the listing"
  profileDescription: String
}

type UpdateProfileResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Updated user"
  user: User
}
